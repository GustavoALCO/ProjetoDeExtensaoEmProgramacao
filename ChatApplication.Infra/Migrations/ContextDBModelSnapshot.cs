// <auto-generated />
using System;
using System.Collections.Generic;
using ChatApplication.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatApplication.Infra.Migrations
{
    [DbContext(typeof(ContextDB))]
    partial class ContextDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatApplication.Dommain.Entities.Chat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Image")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ChatId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.Mensage", b =>
                {
                    b.Property<int>("MensageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MensageId"));

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<List<string>>("ImageMensage")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("SendMensage")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("MensageId");

                    b.HasIndex("ChatId");

                    b.ToTable("Mensage");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.MensageStatus", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("boolean");

                    b.Property<int?>("MensageId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReaAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ReadMensage")
                        .HasColumnType("boolean");

                    b.HasKey("UserId");

                    b.HasIndex("MensageId");

                    b.ToTable("MensageStatus");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateData")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<List<string>>("Image")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex("ChatId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.UserFriend", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserFriend");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.Mensage", b =>
                {
                    b.HasOne("ChatApplication.Dommain.Entities.Chat", null)
                        .WithMany("Mensages")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.MensageStatus", b =>
                {
                    b.HasOne("ChatApplication.Dommain.Entities.Mensage", null)
                        .WithMany("MensageStatus")
                        .HasForeignKey("MensageId");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.User", b =>
                {
                    b.HasOne("ChatApplication.Dommain.Entities.Chat", null)
                        .WithMany("Users")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.Chat", b =>
                {
                    b.Navigation("Mensages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ChatApplication.Dommain.Entities.Mensage", b =>
                {
                    b.Navigation("MensageStatus");
                });
#pragma warning restore 612, 618
        }
    }
}
